/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => animeToObsidian
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// settings.ts
var import_obsidian2 = require("obsidian");

// filefinder.ts
var import_obsidian = require("obsidian");
var maxDepth = 100;
function ls(app, asked, currentFolder = app.vault.getRoot(), currentDepth = 0) {
  let listOfFiles = [];
  if (currentDepth > maxDepth) {
    return listOfFiles;
  }
  currentFolder.children.forEach((file) => {
    if (file instanceof import_obsidian.TFolder) {
      if (asked === "folder" || asked === "all" || asked === void 0) {
        listOfFiles.push(file.path);
      }
      listOfFiles = listOfFiles.concat(ls(app, asked, file, currentDepth + 1));
    } else if (file instanceof import_obsidian.TFile) {
      if (asked === "file" || asked === "all" || asked === void 0) {
        listOfFiles.push(file.path);
      }
    }
  });
  return listOfFiles;
}

// settings.ts
var translations = {
  en: {
    basePath: "Base Path",
    basePathDesc: "The base path for your anime list",
    checklist: "Checklist",
    checklistDesc: "Do you want to list your anime?",
    checklistPath: "Checklist Path",
    checklistPathDesc: "The path where you want to checklist your anime",
    selectBasePath: "Select a base path",
    selectListPath: "Select a list path",
    listname: "anime list"
  },
  fr: {
    basePath: "Chemin de base",
    basePathDesc: "Le chemin de base pour votre liste d'anime",
    checklist: "Liste des animes",
    checklistDesc: "Voulez-vous lister vos animes dans un fichier ?",
    checklistPath: "Chemin de la liste",
    checklistPathDesc: "Le chemin o\xF9 vous voulez lister vos animes",
    selectBasePath: "S\xE9lectionnez un chemin de base",
    selectListPath: "S\xE9lectionnez un chemin de liste",
    listname: "liste d'anime"
  }
};
var currentlang = moment.locale();
if (currentlang !== "en" && currentlang !== "fr") {
  currentlang = "en";
}
function t(key) {
  const translation = translations[currentlang][key] || translations["en"][key];
  return translation || key;
}
var DEFAULT_SETTINGS = {
  basePath: "",
  list: false,
  listPath: "",
  animes_history: [],
  listname: t("listname")
};
var animeToObsidianSettingsTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    const options = ls(this.app, "folder");
    new import_obsidian2.Setting(containerEl).setName(t("basePath")).setDesc(t("basePathDesc")).addDropdown((dropdown) => {
      dropdown.addOption("", t("selectBasePath"));
      options.forEach((option) => {
        dropdown.addOption(option, option);
      });
      dropdown.setValue(this.plugin.settings.basePath);
      dropdown.onChange(async (value) => {
        this.plugin.settings.basePath = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian2.Setting(containerEl).setName(t("checklist")).setDesc(t("checklistDesc")).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.list);
      toggle.onChange(async (value) => {
        this.plugin.settings.list = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian2.Setting(containerEl).setName(t("checklistPath")).setDesc(t("checklistPathDesc")).addDropdown((dropdown) => {
      dropdown.addOption("", t("selectListPath"));
      options.forEach((option) => {
        dropdown.addOption(option, option);
      });
      dropdown.setValue(this.plugin.settings.listPath);
      dropdown.onChange(async (value) => {
        this.plugin.settings.listPath = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian2.Setting(containerEl).setName(t("listname")).setDesc(t("listname")).addText((text) => text.setPlaceholder(t("listname")).setValue(this.plugin.settings.listname).onChange(async (value) => {
      this.plugin.settings.listname = value;
      await this.plugin.saveSettings();
    }));
  }
};

// main.ts
var translations2 = {
  en: {
    addPageTitle: "Add a page for an anime",
    submitButton: "Submit",
    animeHistory: "Anime History",
    animeHistoryDescription1: "this page is for managing your anime list save (the one that can be use when building the checklist)",
    animeHistoryDescription2: "warning : the cross doesn't delete the file but delete the anime name in your history",
    createlist: "Create the list",
    noListError: "you need to enable the list in the settings or create it with the command 'create-anime-list'"
  },
  fr: {
    addPageTitle: "Ajouter une page pour un anime",
    submitButton: "Soumettre",
    animeHistory: "Historique des animes",
    animeHistoryDescription1: "cette page est pour g\xE9rer votre historique de liste d'anime (celui qui peut \xEAtre utilis\xE9 lors de la construction de la liste)",
    animeHistoryDescription2: "attention : la croix ne supprime pas le fichier mais supprime le nom de l'anime dans votre historique",
    createlist: "Cr\xE9er la liste",
    noListError: "vous devez activer la liste dans les param\xE8tres ou la cr\xE9er avec la commande 'create-anime-list'"
  }
};
var currentlang2 = moment.locale();
if (currentlang2 !== "en" && currentlang2 !== "fr") {
  currentlang2 = "en";
}
function t2(key) {
  const translation = translations2[currentlang2][key] || translations2["en"][key];
  return translation || key;
}
var aditionaltags = {
  tags: ["anime", "culture"]
};
var TextPromptModal = class extends import_obsidian3.Modal {
  constructor(app) {
    super(app);
    this.text = "";
  }
  onOpen() {
    let { contentEl } = this;
    let title = contentEl.createEl("h2");
    title.textContent = t2("addPageTitle");
    let textInput = contentEl.createEl("input", { type: "text" });
    textInput.addEventListener("input", () => {
      this.text = textInput.value;
    });
    let submitButton = contentEl.createEl("button", { cls: "mod-cta" });
    submitButton.textContent = t2("submitButton");
    submitButton.addEventListener("click", () => {
      this.close();
      if (this.resolver) {
        this.resolver(this.text);
      }
    });
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
  // Ajouter une mÃ©thode pour obtenir la valeur de la zone de texte
  getValue() {
    return new Promise((resolve) => {
      this.resolver = resolve;
    });
  }
};
var animeText = class {
  constructor() {
  }
  createText(animeData, animeName, aditionaltags2) {
    let text = "";
    text += "---\n" + this.createTags(animeData, animeName, aditionaltags2) + "---\n";
    text += `# description: 
 ${animeData.synopsis}
`;
    return text;
  }
  createTags(data, animeName, aditionaltags2) {
    let tags = "tags:\n";
    tags += `  - ${spaceremover(animeName)}
`;
    aditionaltags2.tags.forEach((element) => {
      element = spaceremover(element);
      tags += `  - ${element}
`;
    });
    data.genres.forEach((element) => {
      tags += `  - ${element.name}
`;
    });
    data.themes.forEach((element) => {
      tags += `  - ${element.name}
`;
    });
    data.demographics.forEach((element) => {
      tags += `  - ${element.name}
`;
    });
    return tags;
  }
};
var AnimeHistoryMoldal = class extends import_obsidian3.Modal {
  constructor(app, plugin) {
    super(app);
    this.modalEl.addClass("anime-history-modal");
    this.plugin = plugin;
  }
  onOpen() {
    let { contentEl } = this;
    let title = contentEl.createEl("h2");
    title.textContent = t2("animeHistory");
    let description = contentEl.createEl("p", { cls: "description" });
    description.textContent = t2("animeHistoryDescription1");
    description = contentEl.createEl("p", { cls: "avertissement" });
    description.textContent = t2("animeHistoryDescription2");
    let list = contentEl.createEl("ul");
    let history = this.plugin.settings.anime_history || [];
    history.forEach((item) => {
      let listItem = list.createEl("li", { cls: "history-item" });
      listItem.textContent = item + " ";
      let deleteButton = listItem.createEl("button", { cls: "delete-button" });
      deleteButton.textContent = "X";
      deleteButton.addEventListener("click", () => {
        const index = history.indexOf(item);
        if (index > -1) {
          history.splice(index, 1);
        }
        this.plugin.saveSettings();
        contentEl.empty();
        this.onOpen();
      });
    });
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};
var animeToObsidian = class extends import_obsidian3.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "open-anime-history",
      name: t2("animeHistory"),
      callback: async () => {
        let modal = new AnimeHistoryMoldal(this.app, this);
        modal.open();
      }
    });
    this.addCommand({
      id: "create-anime-list",
      name: t2("createlist"),
      callback: async () => {
        if (!this.settings.list) {
          new import_obsidian3.Notice("you need to enable the list in the settings");
          return;
        }
        let filePath = this.settings.listPath + "/" + this.settings.listname + ".md";
        if (await this.app.vault.adapter.exists(filePath)) {
          new import_obsidian3.Notice("File already exists. Deleting the existing file.");
          await this.app.vault.adapter.remove(filePath);
        }
        let history = this.settings.anime_history || [];
        let text = "";
        history.forEach((element) => {
          text += `- [ ] [[${element}]]
`;
        });
        let file = await this.app.vault.create(this.settings.listPath + "/" + this.settings.listname + ".md", text);
        let leaf = this.app.workspace.getLeaf();
        await leaf.openFile(file);
      }
    });
    this.addCommand({
      id: "submit-anime",
      name: t2("addPageTitle"),
      callback: async () => {
        let modal = new TextPromptModal(this.app);
        modal.open();
        let value = await modal.getValue();
        if (value != "") {
          const history = this.settings.anime_history || [];
          history.push(value);
          this.settings.anime_history = history;
          await this.saveSettings();
          if (this.settings.list && await this.app.vault.adapter.exists(this.settings.listPath + "/" + this.settings.listname + ".md")) {
            let file2 = await this.app.vault.getAbstractFileByPath(this.settings.listPath + "/" + this.settings.listname + ".md");
            let content = await this.app.vault.read(file2);
            content += `- [ ] [[${value}]]
`;
            await this.app.vault.modify(file2, content);
          } else {
            new import_obsidian3.Notice(t2("noListError"));
          }
          let filePath = this.settings.basePath + "/" + value + ".md";
          let file = await this.app.vault.create(filePath, "");
          let leaf = this.app.workspace.getLeaf();
          await leaf.openFile(file);
          if (leaf.view instanceof import_obsidian3.MarkdownView) {
            let editor = leaf.view.editor;
            let text = new animeText();
            editor.setValue(text.createText(await getAnimeData(value), value, aditionaltags));
          }
        } else {
          new import_obsidian3.Notice("did you type nothing ? (error : variable is empty)");
        }
      }
    });
    this.addSettingTab(new animeToObsidianSettingsTab(this.app, this));
  }
  async onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
function spaceremover(text) {
  let newtext = "";
  for (let i = 0; i < text.length; i++) {
    if (text[i] == " ") {
      newtext += "_";
    } else {
      newtext += text[i];
    }
  }
  return newtext;
}
async function getAnimeData(animeName) {
  const request = {
    url: `https://api.jikan.moe/v4/anime?q=${animeName}&limit=1`,
    method: "GET"
  };
  try {
    const response = await (0, import_obsidian3.requestUrl)(request);
    if (response.status !== 200) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    return response.json.data[0];
  } catch (error) {
    console.error(`Failed to fetch anime data: ${error.message}`);
  }
}
//# sourceMappingURL=data:application/json;base64,
